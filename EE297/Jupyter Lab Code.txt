import tensorflow as tf
tf.__version__


import tensorflow as tf
mnist = tf.keras.datasets.mnist #28x28 images of hand-written digits 0-9
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
             metrics = ['accuracy'])
model.fit(x_train,y_train, epochs = 3)


val_loss, val_acc = model.evaluate(x_test, y_test)
print(val_loss,val_acc)


import matplotlib.pyplot as plt
plt.imshow(x_train[0], cmap = plt.cm.binary)
plt.show()
#print(x_train[0])


model.save('epic_num_reader.model')


new_model = tf.keras.models.load_model('epic_num_reader.model')


predictions = new_model.predict([x_test])


print(predictions)


import numpy as np
print(np.argmax(predictions[0]))


plt.imshow(x_test[0])
plt.show()


import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
DATADIR = r'C:\Users\leahd\ImageClassification\data'
CATEGORIES = ['Aluminium Cans', 'Plastic Bottles']
for category in CATEGORIES:
    path = os.path.join(DATADIR, category) # path to cans or bottles
    for img in os.listdir(path):
        img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
        plt.imshow(img_array, cmap="gray")
        plt.show()
        break
    break


print(img_array.shape)


IMG_SIZE = 50
new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
plt.imshow(new_array, cmap = 'gray')
plt.show()


training_data = []
def create_training_data():
    for category in CATEGORIES:
        path = os.path.join(DATADIR, category) # past to cans or bottles
        class_num = CATEGORIES.index(category)
        for img in os.listdir(path):
            try:
                img_array = cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
                training_data.append([new_array, class_num])
            except Exception as e:
                pass
create_training_data()


print(len(training_data))


import random
random.shuffle(training_data)


for sample in training_data[:10]:
    print(sample[1])


X = []
y = []


for features, label in training_data:
    X.append(features)
    y.append(label)
    

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)


import pickle
pickle_out = open("X.pickle","wb")
pickle.dump(X, pickle_out)
pickle_out.close()
pickle_out = open("y.pickle","wb")
pickle.dump(y, pickle_out)
pickle_out.close()
pickle_in = open("X.pickle","rb")
X = pickle.load(pickle_in)


X[1]


import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D
import pickle


X = pickle.load(open("X.pickle","rb"))
y = pickle.load(open("y.pickle","rb"))

X = X/255.0


model = Sequential()
model.add(Conv2D(64, (3,3), input_shape = X.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64, (3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(64))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.compile(loss="binary_crossentropy",
             optimizer = "adam",
             metrics = ['accuracy'])
model.fit(X, y, batch_size=32, epochs=3 validation_split=0.1)


import cv2
import time
import serial
from PIL import Image
import numpy as np
from keras.models import load_model


pip install pyserial


# Connect to the Arduino Uno
ser = serial.Serial('COM7', 9600)
# Load the model
model_path = r'C:\Users\leahd\ImageClassification\BottleCanModel.h5'
model = load_model(model_path)


# Loop to capture images from the webcam and send them to the Arduino Uno
while True:
    # Capture an image from the webcam
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    cap.release()
    # Resize the image
    img = Image.fromarray(frame)
    img = img.resize((256, 256))   
    # Convert the image to a numpy array
    x = np.array(img)   
    # Expand the dimensions of the array to match the model's input shape
    x = np.expand_dims(x, axis=0)   
    # Make the prediction
    prediction = model.predict(x)
    time.sleep(2)
    # Print the predicted class
    if prediction > 0.5:
        print("Can")
        time.sleep(2)
        ser.write(b'1') # Move the servo motor to the green position
        time.sleep(2)
    else:
        print("Bottle")
        time.sleep(2)
        ser.write(b'2') # Move the servo motor to the brown position
        time.sleep(2)   
    if ser.in_waiting > 0:
        value = ser.readline().decode('utf-8').rstrip()
        print("Received value:", value)



